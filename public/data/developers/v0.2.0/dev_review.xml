<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document PUBLIC "+//IDN docutils.sourceforge.net//DTD Docutils Generic//EN//XML" "http://docutils.sourceforge.net/docs/ref/docutils.dtd">
<!-- Generated by Docutils 0.16 -->
<document source="/Users/kmoy001/libcellml/libcellml-src/docs/dev_review.rst">
    <target refid="dev-review"></target>
    <section ids="review-process dev-review" names="review\ process dev_review">
        <title>Review Process</title>
        <section ids="check-for-the-green-tick" names="check\ for\ the\ green\ tick">
            <title>Check for the green tick</title>
            <paragraph>Before accepting a tranche of work into the libCellML prime repository check that <reference internal="False" refuri="https://buildbot.net/">Buildbot</reference> has tested and passed the code.
                The status of the code is shown in the last commit of a pushed group of commits in the pull request.
                The last commit will have a red cross for a failed build or a green tick for a passed build.
                Obviously, make sure that the last commit has a green tick before merging.</paragraph>
        </section>
        <section ids="read-the-documentation" names="read\ the\ documentation">
            <title>Read the documentation</title>
            <paragraph>The documentation for the project is built as part of the testing process.
                The details link at the bottom of the pull request web page will take you to the <reference internal="False" refuri="https://buildbot.net/">Buildbot</reference> build of the library.
                This page shows the results of the unit tests for each target operating system, the results of the coverage test, the results of the memory check test, and the results of the documentation build.</paragraph>
            <paragraph>The Documentation Builder link (entry 2 in step 5) will take you to the build for the documentation.
                On this page, you can see the steps taken to build the documentation.
                In the last step of the build (step 7), there is a link ‘dox’ (entry 2) that will take you to the built documentation.</paragraph>
            <paragraph>The documentation should be reviewed in its final format particularly those parts of the documentation that (should) have changed due to the current pull request.
                The API documentation (generated by <reference internal="False" refuri="http://www.doxygen.nl/">Doxygen</reference> ) can be reached from the <reference internal="False" refuri="/documentation/api/latest/classlibcellml_1_1">API Documentation</reference> pages.
                The coverage statistics for the library (generated from <reference internal="False" refuri="https://gcovr.com/">gcovr</reference> ) can be reached through the <reference internal="True" refuri="coverage_statistics#coverage-statistics"><inline classes="std std-ref">Coverage Statistics</inline></reference> page.</paragraph>
        </section>
        <section ids="resolving-comments" names="resolving\ comments">
            <title>Resolving comments</title>
            <paragraph>All comments on the pull request and associated issue should be responded to and satisfied.
                It is the reviewers responsibility to check that this has happened before merging the pull request.</paragraph>
        </section>
        <section ids="coding-standard" names="coding\ standard">
            <title>Coding standard</title>
            <paragraph>Currently, there is no fully defined libCellML coding standard set, but the :google_style_guide”<title_reference>Google C++ Style Guide&lt;&gt;</title_reference> can be considered a baseline for the standard of code that is expected for libCellML.
                See the <reference internal="True" refuri="dev_coding_standards#dev-coding-standards"><inline classes="std std-ref">Coding Standards</inline></reference> document for deviations from this guideline.</paragraph>
        </section>
        <section ids="merging-a-pull-request" names="merging\ a\ pull\ request">
            <title>Merging a pull request</title>
            <paragraph>When merging a pull request, the reviewer should add a comment so that the corresponding issue is closed.
                This can be done by adding a directive to the merge commit, like so:</paragraph>
            <literal_block force="False" language="default" linenos="False" xml:space="preserve">closes #123</literal_block>
            <paragraph>where the numeral corresponds to the issue that needs to be closed.
                You can use other closing directives that will achieve the same outcome, please see <reference internal="False" refuri="https://help.github.com/articles/closing-issues-via-commit-messages/">the Github article for a list of all directives</reference> that will work on Github.</paragraph>
        </section>
    </section>
</document>
